server.port=${SPRING_AUTH_PROXY_PORT_HTTPS:9443}
# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.enabled=false
server.ssl.key-store-type=JKS
# 1. Would jks file be tenant specific
#  How exactly it would be stored in tenant config
#  How we would manage as jks is loaded at startup
# The path to the keystore containing the certificate
server.ssl.key-store=${KEYSTORE_FILE_NAME:uidamauthserver.jks}
# The password used to generate the certificate
server.ssl.key-store-password=${KEYSTORE_PASS:uidam-test-pwd}
# The alias mapped to the certificate
server.ssl.key-alias=${KEYSTORE_ALIAS:uidam-dev}
server.http.port=${SPRING_AUTH_PROXY_PORT:9000}
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
#spring.jpa.properties.hibernate.default_schema=testSchema
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.liquibase.enabled=false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=false
# This will create table automatically in your database
spring.jpa.hibernate.ddl-auto=none
spring.thymeleaf.enabled=true
jwt.key.id='configured-f89f-35a1-b812-8a10c652be5h'
jwt.key.public=app.pub
jwt.key.private=app.key
user.management.base.url=${USER_MANAGEMENT_ENV:https://uidam-user-management.eks-spring-auth.ic.aws.harmandev.com}
ignite.oauth2.issuer.port=${SPRING_AUTH_PROXY_PORT_HTTPS:9443}
ignite.oauth2.issuer.host=${SPRING_AUTH_PROXY_HOSTNAME:localhost}
ignite.oauth2.issuer.protocol=https
ignite.oauth2.jks-enabled=${JKS_ENABLED:true}
###Graylog Configuration###
APP_GRAYLOG_ENABLED:${GRAYLOG_ENABLED:false}
APP_GRAYLOG_HOST:${GRAYLOG_HOST:graylog.default.svc.cluster.local}
APP_GRAYLOG_PORT:${GRAYLOG_PORT:12201}
APP_NEVER_BLOCK_FOR_GRAYLOG:${NEVER_BLOCK_FOR_GRAYLOG:false}
APP_LOG_FOLDER:${LOG_FOLDER:logs/}
APP_LOG_LEVEL:${LOG_LEVEL:ERROR}
APP_IGNITE_LOG_LEVEL:${IGNITE_LOG_LEVEL:ERROR}
APP_SVC_LOG_LEVEL:${SVC_LOG_LEVEL:INFO}
APP_STORAGE_LOG_LEVEL:${STORAGE_LOG_LEVEL:ERROR}
APP_SPRING_LOG_LEVEL:${SPRING_LOG_LEVEL:ERROR}
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
postgres.jdbc.url=${POSTGRES_DATASOURCE:jdbc:postgresql://localhost:5432/uidam_management}
postgres.username=${POSTGRES_USERNAME:ChangeMe}
postgres.password=${POSTGRES_PASSWORD:ChangeMe}
postgres.driver.class.name=org.postgresql.Driver
postgres.pool.name=hikariConnectionPool
postgres.data-source-properties.cachePrepStmts=true
postgres.data-source-properties.prepStmtCacheSize=250
postgres.data-source-properties.prepStmtCacheSqlLimit=2048
postgres.max.idle.time=0
postgres.connection.timeout.ms=60000
postgres.expected99thPercentileMs=60000
management.endpoints.web.exposure.include=metrics
metrics.prometheus.enabled=false
postgresdb.metrics.enabled=false
prometheus.agent.port=9100
prometheus.agent.port.exposed=9100
postgresdb.metrics.thread.initial.delay.ms=1000
postgresdb.metrics.thread.freq.ms=5000
service.name=uidam-Authorization-Server
sp.restart.on.failure=false
health.service.executor.initial.delay=10000
health.service.retry.interval.millis=120000
health.postgresdb.monitor.enabled=false
health.postgresdb.monitor.restart.on.failure=false
client.by.client.id.endpoint=${CLIENT_BY_CLIENT_ID_ENDPOINT:/v1/oauth2/client/{clientId}}
user.by.username.endpoint=${USER_BY_USERNAME_ENDPOINT:/v1/users/{userName}/byUserName}
account.name=ecsp
account.field.enabled=false
###Standalone Properties###
tenant.tenant-id=uidam
tenant.jks-enabled=true
tenant.account.account-id=ecsp
tenant.account.account-name=ecsp
tenant.account.account-type=ecsp
tenant.account.account-field-enabled=false
tenant.client.access-token-ttl=1
tenant.client.id-token-ttl=1
tenant.client.refresh-token-ttl=1
tenant.client.auth-code-ttl=1
tenant.client.reuse-refresh-token=false
tenant.client.secret-encryption-key=ChangeMe
tenant.client.secret-encryption-salt=ChangeMe
tenant.tenant-name=uidam
tenant.alias=ecsp
tenant.contact-details.contact-name=admin
tenant.contact-details.phone-number=8888888888
tenant.contact-details.email=john.doe@domain.com
tenant.user.captcha-after-invalid-failures=2
tenant.user.captcha-required=false
tenant.user.failed-login-attempts=3
tenant.user.default-role = ${TENANT_USER_DEFAULT_ROLE:VEHICLE_OWNER}
tenant.sign-up-enabled=${TENANT_SIGN_UP_ENABLED:true}
tenant.external-idp-details.client-id=ignite
tenant.external-idp-details.client-secret=secret

# tenant external urls
tenant.external-urls.user-management-base-url= http://localhost:8080
tenant.external-urls.user-by-username-endpoint=/v1/users/{userName}/byUserName
tenant.external-urls.client-by-client-id-endpoint=/v1/oauth2/client/{clientId}
tenant.external-urls.add-user-events-endpoint=/v1/users/{id}/events
tenant.external-urls.user-recovery-notif-endpoint=/v1/users/{userName}/recovery/forgotpassword
tenant.external-urls.reset-password-endpoint=/v1/users/recovery/set-password
tenant.external-urls.create-fedrated-user-endpoint=${CREATE_USER_ENDPOINT:/v1/users/federated}
tenant.key-store.key-store-filename=uidamauthserver.jks
# The password used to generate the certificate
tenant.key-store.key-store-password=uidam-test-pwd
# The alias mapped to the certificate
tenant.key-store.key-alias=uidam-dev
#  How exactly it would be stored in tenant config
#  How we would manage as jks is loaded at startup
tenant.key-store.key-type=JKS
tenant.key-store.jwt-public-key-path=${JWT_PUBLIC_KEY_PEM_PATH:uidampubkey.pem}

tenant.cert.jwt-public-key=app.pub
tenant.cert.jwt-private-key=app.key
tenant.cert.jwt-key-id='configured-f89f-35a1-b812-8a10c652be5h'
tenant.captcha.recaptcha-key-site=ChangeMe
tenant.captcha.recaptcha-key-secret=ChangeMe
tenant.captcha.recaptcha-verify-url=https://www.google.com/recaptcha/api/siteverify
add.user.events.endpoint=/v1/users/{id}/events
#Fixed session timeout
server.servlet.session.timeout=5m
session.recreation.policy=IF_REQUIRED
#Force login after auth code generation
user.session.force.login=true
cleanup.job.batch.size=${CLEANUP_JOB_BATCH_SIZE:50000}
cleanup.job.scheduling.rate.cron=${CLEANUP_JOB_SCHEDULING_RATE_CRON: */15 * * * * *}
cleanup.job.scheduling.retry.attempts=${CLEANUP_JOB_SCHEDULING_RETRY_ATTEMPTS:3}
cleanup.token.expires.before=${CLEANUP_TOKEN_EXPIRES_BEFORE_IN_DAYS:1}

#Cache configuration
cache.expire.mins=60
cache.max.size=100
cache.client.ids=token-mgmt,device-mgmt

#CORS configuration
cors.allowed.origin.patterns=*.harmandev.com,*.harman.com
cors.allowed.methods=GET,HEAD,POST

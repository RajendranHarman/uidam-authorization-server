server.port= ${SPRING_AUTH_PROXY_PORT_HTTPS:9443}

# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.enabled= true
# The alias mapped to the certificate
server.ssl.key-alias= ${KEYSTORE_ALIAS:uidam-dev}
server.ssl.key-store-type=JKS
# The path to the keystore containing the certificate
server.ssl.key-store= ${KEYSTORE_FILE_NAME:uidamauthserver.jks}
# The password used to generate the certificate
server.ssl.key-store-password= ${KEYSTORE_PASS:uidam-test-pwd}
server.http.port= ${SPRING_AUTH_PROXY_PORT:9000}
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.liquibase.change-log=classpath:database.schema/master.xml

spring.jpa.properties.hibernate.default_schema=${UIDAM_DEFAULT_DB_SCHEMA:uidam}
spring.liquibase.default-schema=${UIDAM_DEFAULT_DB_SCHEMA:uidam}
spring.liquibase.parameters.schema=${UIDAM_DEFAULT_DB_SCHEMA:uidam}
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=false

# This will create table automatically in your database
spring.jpa.hibernate.ddl-auto=none
spring.thymeleaf.enabled=true


spring.thymeleaf.prefix=${UI_TEMPLATE_PATH:classpath:/templates/}
spring.thymeleaf.check-template-location=true
spring.thymeleaf.check-template=true
spring.web.resources.static-locations=${UI_STATIC_PATH:classpath:/static}
#jwt.signing.key= ymLTU8rq83j4fmJZj60wh4OrMNuntIj4fmJ

user.management.base.url= ${USER_MANAGEMENT_ENV:http://localhost:8080}

#ignite.oauth2.issuer.port= ${SPRING_AUTH_PROXY_PORT_HTTPS:9443}
ignite.oauth2.issuer.protocol= https
ignite.oauth2.issuer.host= ${SPRING_AUTH_PROXY_HOSTNAME:localhost:9443}
ignite.oauth2.issuer.prefix= ${SPRING_AUTH_PROXY_PREFIX:}
#server.servlet.context-path=${SERVER_SERVLET_CONTEXT_PATH:}
cleanup.job.batch.size=${CLEANUP_JOB_BATCH_SIZE:50000}
cleanup.job.scheduling.rate.cron=${CLEANUP_JOB_SCHEDULING_RATE_CRON: 0 0 */6 * * *}
cleanup.job.scheduling.retry.attempts=${CLEANUP_JOB_SCHEDULING_RETRY_ATTEMPTS:3}
cleanup.token.expires.before=${CLEANUP_TOKEN_EXPIRES_BEFORE_IN_DAYS:1}

ignite.oauth2.jks-enabled= ${JKS_ENABLED:true}

###Standalone Properties###
tenant.tenant-id=${TENANT_ID:ecsp}
tenant.tenant-name=${TENANT_NAME:ecsp}
tenant.jks-enabled=${JKS_ENABLED:true}
tenant.account.account-id=${TENANT_ACCOUNT_ID:10001}
tenant.account.account-name=${TENANT_ACCOUNT_NAME:ecsp}
tenant.account.account-type=${TENANT_ACCOUNT_TYPE:Root}
tenant.account.account-field-enabled=${ACCOUNT_FIELD_ENABLED:true}
tenant.client.access-token-ttl=${TENANT_CLIENT_ACCESS_TOKEN_TTL:3600}
tenant.client.id-token-ttl=${TENANT_CLIENT_ID_TOKEN_TTL:3600}
tenant.client.refresh-token-ttl=${TENANT_CLIENT_REFRESH_TOKEN_TTL:3600}
tenant.client.auth-code-ttl=${TENANT_CLIENT_AUTH_CODE_TTL:300}
tenant.client.oauth-scope-customization=${TENANT_OAUTH_SCOPE_CUSTOMIZATION:false}
tenant.client.reuse-refresh-token=${TENANT_CLIENT_REUSE_REFRESH_TOKEN:false}
tenant.client.secret-encryption-key=${TENANT_CLIENT_SECRET_ENCRYPTION_KEY:ChangeMe}
tenant.client.secret-encryption-salt=${TENANT_CLIENT_SECRET_ENCRYPTION_SALT:ChangeMe}
tenant.alias=${TENANT_ALIAS:ecsp}
tenant.password-recovery-url=${TENANT_PASSWORD_RECOVERY_URL:http://localhost:9443/recovery}
tenant.contact-details.contact-name=${TENANT_CONTACT-NAME:}
tenant.contact-details.phone-number=${TENANT_PHONE_NUMBER:}
tenant.contact-details.email=${TENANT_EMAIL:}
tenant.user.captcha-after-invalid-failures=${TENANT_USER_CAPTCHA_AFTER_INVALID_FAILURES:1}
tenant.user.captcha-required=${TENANT_USER_CAPTCHA_REQUIRED:false}
tenant.user.max-allowed-login-attempts=${TENANT_USER_MAX_ALLOWED_LOGIN_ATTEMPTS:3}
tenant.user.default-role = ${TENANT_USER_DEFAULT_ROLE:VEHICLE_OWNER}
tenant.sign-up-enabled=${TENANT_SIGN_UP_ENABLED:true}
tenant.external-idp-details.client-id=${TENANT_EXTERNAL_IDP_CLIENT_ID:}
tenant.external-idp-details.secret=${TENANT_EXTERNAL_IDP_SECRET:}

# tenant external urls
tenant.external-urls.user-management-base-url= ${USER_MANAGEMENT_ENV:http://localhost:8080}
tenant.external-urls.user-by-username-endpoint=${USER_BY_USERNAME_ENDPOINT:/v1/users/{userName}/byUserName}
tenant.external-urls.client-by-client-id-endpoint=${CLIENT_BY_CLIENT_ID_ENDPOINT:/v1/oauth2/client/{clientId}}
tenant.external-urls.add-user-events-endpoint=${ADD_USER_EVENTS_ENDPOINT:/v1/users/{id}/events}
tenant.external-urls.user-recovery-notif-endpoint=${USER_RECOVERY_NOTIFICATION_ENDPOINT:/v1/users/{userName}/recovery/forgotpassword}
tenant.external-urls.reset-password-endpoint=${USER_UPDATE_PASSWORD_USING_RECOVERY_SECRET_ENDPOINT:/v1/users/recovery/set-password}
tenant.external-urls.self-create-user-endpoint=${CREATE_USER_ENDPOINT:/v1/users/self}
tenant.external-urls.password-policy-endpoint=${PASSWORD_POLICY_ENDPOINT:/v1/users/password-policy}
tenant.external-urls.create-fedrated-user-endpoint=${CREATE_FEDRATED_USER_ENDPOINT:/v1/users/federated}


# The path to the keystore containing the certificate
tenant.key-store.key-store-filename=${KEYSTORE_FILE_NAME:uidamauthserver.jks}
# The password used to generate the certificate
tenant.key-store.key-store-password=${KEYSTORE_PASS:uidam-test-pwd}
# The alias mapped to the certificate
tenant.key-store.key-alias=${KEYSTORE_ALIAS:uidam-dev}
#  How exactly it would be stored in tenant config
#  How we would manage as jks is loaded at startup
tenant.key-store.key-type=${KEYSTORE_TYPE:JKS}
tenant.key-store.jwt-public-key-path=${JWT_PUBLIC_KEY_PEM_PATH:uidampubkey.pem}
#Updated jwt files
tenant.cert.jwt-public-key=${JWT_PUBLIC_KEY:app.pub}
tenant.cert.jwt-private-key=${JWT_PRIVATE_KEY:app.key}
tenant.cert.jwt-key-id= ${JWT_KEY_ID:'configured-f89f-35a1-b812-8a10c652be5h'}
tenant.user.jwt-additional-claim-attributes= ${JWT_ADDITIONAL_CLAIM_ATTRIBUTES:}

tenant.captcha.recaptcha-key-site=${TENANT_CAPTCHA_RECAPTCHA_KEY_SITE:TO-BE-UPDATED}
tenant.captcha.recaptcha-key-secret=${TENANT_CAPTCHA_RECAPTCHA_KEY_SECRET:TO-BE-UPDATED}
tenant.captcha.recaptcha-verify-url=${TENANT_CAPTCHA_RECAPTCHA_VERIFY_URL:https://www.google.com/recaptcha/api/siteverify}

#Cache configuration
cache.expire.mins=60
cache.max.size=100
cache.client.ids=token-mgmt,device-mgmt

###Graylog Configuration###
APP_GRAYLOG_ENABLED : ${GRAYLOG_ENABLED:false}
APP_GRAYLOG_HOST : ${GRAYLOG_HOST:graylog.default.svc.cluster.local}
APP_GRAYLOG_PORT : ${GRAYLOG_PORT:12201}
APP_NEVER_BLOCK_FOR_GRAYLOG : ${NEVER_BLOCK_FOR_GRAYLOG:false}
APP_LOG_FOLDER : ${LOG_FOLDER:logs/}
APP_LOG_LEVEL : ${LOG_LEVEL:ERROR}
APP_IGNITE_LOG_LEVEL : ${IGNITE_LOG_LEVEL:ERROR}
APP_SVC_LOG_LEVEL : ${SVC_LOG_LEVEL:ERROR}
APP_STORAGE_LOG_LEVEL : ${STORAGE_LOG_LEVEL:ERROR}
APP_SPRING_LOG_LEVEL : ${SPRING_LOG_LEVEL:ERROR}

#Actuators
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true

postgres.jdbc.url=${POSTGRES_DATASOURCE:jdbc:postgresql://localhost:5432/uidam_management}
postgres.username=${POSTGRES_USERNAME:ChangeMe}
postgres.password=${POSTGRES_USERNAME:ChangeMe}
postgres.driver.class.name=org.postgresql.Driver
postgres.pool.name=hikariConnectionPool
postgres.data-source-properties.cachePrepStmts=${postgres_data_source_properties_cachePrepStmts:true}
postgres.data-source-properties.prepStmtCacheSize=${postgres_data_source_properties_prepStmtCacheSize:250}
postgres.data-source-properties.prepStmtCacheSqlLimit=${postgres_data_source_properties_prepStmtCacheSqlLimit:2048}

postgres.max.idle.time=${postgres_max_idle_time:0}
postgres.min.pool.size=${postgres_min_pool_size:15}
postgres.max.pool.size=${postgres_max_pool_size:30}
postgres.connection.timeout.ms=${postgres_connection_timeout_ms:60000}
postgres.expected99thPercentileMs=${postgres_expected99thPercentileMs:60000}
postgres.datasource.create.retry.count=${postgres_create_retry_count:3}
postgres.datasource.retry.delay.ms=${postgres_retry_delay:30}

postgresdb.metrics.enabled= ${postgresdb_metrics_enabled:false}
postgresdb.metrics.executor.shutdown.buffer.ms= ${postgresdb_metrics_executor_shutdown_buffer_ms:2000}
postgresdb.metrics.thread.freq.ms= ${postgresdb_metrics_thread_freq_ms:5000}
postgresdb.metrics.thread.initial.delay.ms= ${postgresdb_metrics_thread_initial_delay_ms:2000}

metrics.prometheus.enabled= ${metrics_prometheus_enabled:false}
prometheus.agent.port=${prometheus_agent_port:9100}
prometheus.agent.port.exposed=${prometheus_agent_port_exposed:9100}

service.name=uidam-authorization-server

sp.restart.on.failure=false


health.service.executor.initial.delay=10000
health.service.retry.interval.millis=120000
health.postgresdb.monitor.enabled= ${health_postgresdb_monitor_enabled:false}
health.postgresdb.monitor.restart.on.failure= ${health_postgresdb_monitor_restart_on_failure:false}

client.by.client.id.endpoint= ${CLIENT_BY_CLIENT_ID_ENDPOINT:/v1/oauth2/client/{clientId}}
user.by.username.endpoint= ${USER_BY_USERNAME_ENDPOINT:/v1/users/{userName}/byUserName}

account.name= ${ACCOUNT_NAME:ecsp}

account.field.enabled = ${ACCOUNT_FIELD_ENABLED:false}
#Fixed session timeout
server.servlet.session.timeout=5m
#Force user to login always in Auth Code/PKCE flow
user.session.force.login=true

management.endpoints.web.exposure.include=health,info,prometheus,metrics

#CORS configuration
cors.allowed.origin.patterns=*.harmandev.com,*.harman.com
cors.allowed.methods=GET,HEAD,POST

